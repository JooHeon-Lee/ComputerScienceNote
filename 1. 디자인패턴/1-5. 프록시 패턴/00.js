/**
 * 프록시 패턴(proxy pattern)은 대상 객체에 접근하기 전 그 접근에 대한 흐름을 가로채 대상 객체 앞단의 인터페이스 역할을 하는 디자인 패턴
 * 
 * 인터페이스 - 프록시 - 인터페이스 - 대상 객체
 * 
 * 이를 통해 객체의 속성, 변환 등을 보완하며 보안, 데이터 검증, 캐싱, 로깅에 사용한다.
 * 
 * ** 프록시 서버에서의 캐싱
 *    캐시 안에 정보를 담아두고, 캐시 안에 있는 정보를 요구하는 요청에 대해 다시 저 멀리 있는 원격 서버에 요청하지 않고,
 *    캐시 안에 있는 데이터를 활용한다.
 * 
 * 프록시 서버
 * 프록시 서버(proxy server)는 서버와 클라이언트 사이에서 클라이언트가 자신을 통해 다른 네트워크 서비스에 간접적으로 접속할 수 있게
 * 해주는 컴퓨터 시스템이나 응용 프로그램을 가리킨다.
 * 
 * ++ nginx 는 프록시 서버로 쓰임.
 *  Node.js의 버퍼 오버플로우 취약점을 예방하기 위해서는 nginx를 프록시 서버로 앞단에 놓고 Node.js를 뒤쪽에 놓는것이 좋다. => 라이언 달(nodejs창시자)
 * 
 * + 버퍼 오버플로우
 *   -> 버퍼는 보통 데이터가 저장되는 메모리 공간, 메모리 공간을 벗어나는 경우. 이때 사용되지 않아야 할 영역에 데이터가 덮어씌워져 주소, 값을 바꾸는
 *      공격이 발생하기도 한다.
 * 
 * + gzip 압축
 *   -> LZ77과 Huffman 코딩의 조합인 DEFLATE 알고리즘을 기반으로 한 압축 기술.
 *   -> 데이터 전송량을 줄일 수 있지만, 압축 해제시 서버에서의 CPU 오버헤드도 생각해서 gzip 압축 유무를 결정 해야 함.
 */